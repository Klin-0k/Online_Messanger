stages:
#  - lint
#  - test
  - build
  - deploy

#lint:
#  stage: lint
#  image: python:3.9
#  before_script:
#    - pip install black
#  script:
#    - black .
#
#test:
#  image: python:3-alpine
#  stage: test
#  script:
#    - pip install -r requirements.txt
#    - pytest tests.py

build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} .

    # Правило для основной ветки (master или main)
    - if [[ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ]]; then
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} ${CI_REGISTRY_IMAGE}:latest;
        docker push ${CI_REGISTRY_IMAGE}:latest;
      fi

    # Правило для веток и тегов
    - if [[ -z "${CI_COMMIT_TAG}" ]]; then
        docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG};
      else
        docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG};
        docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG};
      fi
#  needs:
#    - ["test"]
  tags:
    - docker

deploy:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
    - docker rm -f ${CI_PROJECT_NAME} || true
    - docker run -d —name ${CI_PROJECT_NAME} -P 80:8000 -v db:/code/db ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}